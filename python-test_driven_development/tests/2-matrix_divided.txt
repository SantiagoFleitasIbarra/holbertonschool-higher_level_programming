#IMPORT MODULE#
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

#TESTS#

# Test Case 1: divide by 0

>>> matrix_divided([[1, 2, 3], [4, 5, 7], [12, 23, 32]], 0)
Traceback (most recent call last):
...
ZeroDivisionError: division by zero

# Test Case 2: divide two matrices
>>> matrix_divided([[1, 5, 87], [21, 12, 2], [4, 8, 9]], [[43, 2, 8], [65, 4, 9], [87, 99, 12]])
Traceback (most recent call last):
...
TypeError: div must be a number

# Test Case 3: empty matrices
>>> matrix_divided([], [])
Traceback (most recent call last):
...
TypeError: div must be a number

# Test Case 4: divide the matrix by an integer
>>> matrix_divided([[1, 2, 3], [4, 5, 6], [7, 8]], 2)
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size

# Test Case 5: matrix with non-integer or non-float elements
>>> matrix_divided([[1, 'two', 3], [4, 5, 6], [7, 8, 9]], 2)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Test Case 6: divide the matrix by an float
>>> matrix_divided([[1, 2, 3], [4, 5, 6], [7, 8, 23]], 2.3)
[[0.43, 0.87, 1.3], [1.74, 2.17, 2.61], [3.04, 3.48, 10.0]]

# Test Case 7: divide the matrix by an integer
>>> matrix_divided([[1, 2, 3], [4, 5, 6], [7, 8, 23]], 5)
[[0.2, 0.4, 0.6], [0.8, 1.0, 1.2], [1.4, 1.6, 4.6]]

# Test Case 8: pass a parameter
>>> matrix_divided([[1, 2, 3], [4, 5, 6], [7, 8, 23]], )
Traceback (most recent call last):
...
TypeError: matrix_divided() missing 1 required positional argument: 'div'

# Test Case 9: nothing parameter
>>> matrix_divided()
Traceback (most recent call last):
...
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'
